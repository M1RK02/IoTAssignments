[
    {
        "id": "5268f1da625ea1e3",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa996229c137716a",
        "type": "group",
        "z": "5268f1da625ea1e3",
        "name": "End node",
        "style": {
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "853e9584f93105d0",
            "7b6d77b814c7bf90"
        ],
        "x": 494,
        "y": 259,
        "w": 412,
        "h": 82
    },
    {
        "id": "0adfcb9fc732b274",
        "type": "group",
        "z": "5268f1da625ea1e3",
        "g": "97cbb051c4204c70",
        "name": "Application Server",
        "style": {
            "label": true,
            "stroke": "#92d04f"
        },
        "nodes": [
            "cec7c04923ebddec",
            "1d60d5a5e1f69c57",
            "6e69490ab1f004fb"
        ],
        "x": 1594,
        "y": 379,
        "w": 712,
        "h": 82
    },
    {
        "id": "9308a352fe648461",
        "type": "group",
        "z": "5268f1da625ea1e3",
        "g": "97cbb051c4204c70",
        "name": "LoRaWAN Network Server",
        "style": {
            "stroke": "#0070c0",
            "label": true
        },
        "nodes": [
            "a6c391791e1fb73e",
            "47abe9d263253128",
            "488377e5fc3f5b55"
        ],
        "x": 1614,
        "y": 259,
        "w": 692,
        "h": 82
    },
    {
        "id": "97cbb051c4204c70",
        "type": "group",
        "z": "5268f1da625ea1e3",
        "name": "The Things Network",
        "style": {
            "label": true,
            "stroke": "#001f60"
        },
        "nodes": [
            "9308a352fe648461",
            "0adfcb9fc732b274",
            "2aa38c5a8bece3ea"
        ],
        "x": 1088,
        "y": 233,
        "w": 1244,
        "h": 254
    },
    {
        "id": "2aa38c5a8bece3ea",
        "type": "group",
        "z": "5268f1da625ea1e3",
        "g": "97cbb051c4204c70",
        "name": "LoRaWAN Gateway",
        "style": {
            "label": true,
            "stroke": "#9363b7"
        },
        "nodes": [
            "bfbde9bad1054735",
            "751a04c11a3aad74"
        ],
        "x": 1114,
        "y": 259,
        "w": 472,
        "h": 82
    },
    {
        "id": "853e9584f93105d0",
        "type": "function",
        "z": "5268f1da625ea1e3",
        "g": "fa996229c137716a",
        "name": "Arduino MRK WAN 1310",
        "func": "//Generate random temperature and humidity\n\nvar field1=Math.random()*10;\nvar field2=Math.random()*10;\nmsg.payload={\n    temperature: field1,\n    humidity: field2,\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "bfbde9bad1054735"
            ]
        ]
    },
    {
        "id": "7b6d77b814c7bf90",
        "type": "inject",
        "z": "5268f1da625ea1e3",
        "g": "fa996229c137716a",
        "name": "DHT22",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "853e9584f93105d0"
            ]
        ]
    },
    {
        "id": "413a4e8b18093703",
        "type": "comment",
        "z": "5268f1da625ea1e3",
        "name": "LoRa RF",
        "info": "",
        "x": 1000,
        "y": 280,
        "wires": []
    },
    {
        "id": "bfbde9bad1054735",
        "type": "function",
        "z": "5268f1da625ea1e3",
        "g": "2aa38c5a8bece3ea",
        "name": "Incapsulate Packet",
        "func": "// This emulate the UDP packet that Gateway sends\nlet packet = {\n    gateway_id: \"gateway_01\",\n    payload: {\n        temperature: msg.payload.temperature,\n        humidity: msg.payload.humidity,\n    },\n};\n\nmsg.payload = JSON.stringify(packet);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "751a04c11a3aad74"
            ]
        ]
    },
    {
        "id": "cec7c04923ebddec",
        "type": "http request",
        "z": "5268f1da625ea1e3",
        "g": "0adfcb9fc732b274",
        "name": "Send to ThingSpeak",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2180,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "1d60d5a5e1f69c57",
        "type": "function",
        "z": "5268f1da625ea1e3",
        "g": "0adfcb9fc732b274",
        "name": "Read packet",
        "func": "var fields = msg.payload.uplink_message.decoded_payload;\n\nmsg.url = \"https://api.thingspeak.com/update?api_key=W1KENRA56BLV3KOA\";\nmsg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"application/x-www-form-urlencoded\" };\nmsg.payload = \"field1=\" + fields.temperature + \"&field2=\" + fields.humidity;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 420,
        "wires": [
            [
                "cec7c04923ebddec"
            ]
        ]
    },
    {
        "id": "a6c391791e1fb73e",
        "type": "function",
        "z": "5268f1da625ea1e3",
        "g": "9308a352fe648461",
        "name": "Verify Packet",
        "func": "// Receive the packet as a JSON string\nlet received = JSON.parse(msg.payload);\n\nif (received.gateway_id === \"gateway_01\") {\n    // Adapt to the TTN-style format\n    msg.payload = {\n        uplink_message: {\n            decoded_payload: {\n                temperature: received.payload.temperature,\n                humidity: received.payload.humidity\n            }\n        }\n    };\n    return msg;\n} else {\n  return null; // Simulate discarted packet\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 300,
        "wires": [
            [
                "47abe9d263253128"
            ]
        ]
    },
    {
        "id": "47abe9d263253128",
        "type": "mqtt out",
        "z": "5268f1da625ea1e3",
        "g": "9308a352fe648461",
        "name": "Expose data with MQTT",
        "topic": "/ttn/devices/device1/up",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d7d5817a8683a565",
        "x": 2170,
        "y": 300,
        "wires": []
    },
    {
        "id": "6e69490ab1f004fb",
        "type": "mqtt in",
        "z": "5268f1da625ea1e3",
        "g": "0adfcb9fc732b274",
        "name": "Receive data from Network Server",
        "topic": "/ttn/devices/device1/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d7d5817a8683a565",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1760,
        "y": 420,
        "wires": [
            [
                "1d60d5a5e1f69c57"
            ]
        ]
    },
    {
        "id": "751a04c11a3aad74",
        "type": "udp out",
        "z": "5268f1da625ea1e3",
        "g": "2aa38c5a8bece3ea",
        "name": "Send to Network Server",
        "addr": "127.0.0.1",
        "iface": "",
        "port": "5000",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1450,
        "y": 300,
        "wires": []
    },
    {
        "id": "488377e5fc3f5b55",
        "type": "udp in",
        "z": "5268f1da625ea1e3",
        "g": "9308a352fe648461",
        "name": "Receive data from Gateway",
        "iface": "",
        "port": "5000",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 1760,
        "y": 300,
        "wires": [
            [
                "a6c391791e1fb73e"
            ]
        ]
    },
    {
        "id": "d7d5817a8683a565",
        "type": "mqtt-broker",
        "name": "Local Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]