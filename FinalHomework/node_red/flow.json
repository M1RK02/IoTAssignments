[
    {
        "id": "832015ea6872af27",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "64bfe64e9a58d64b",
        "type": "group",
        "z": "832015ea6872af27",
        "name": "Forklift 1",
        "style": {
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "3469b36081fa6351",
            "b39d6b0c9b8439b1",
            "6f676160284fba96",
            "1e3deb023cb9726a",
            "d3383d375b95cf3a",
            "093599c98aa47d3a",
            "edeb5ec4bd231884"
        ],
        "x": 194,
        "y": 299,
        "w": 892,
        "h": 122
    },
    {
        "id": "5b670a98d93a0391",
        "type": "group",
        "z": "832015ea6872af27",
        "name": "Local server",
        "style": {
            "label": true,
            "stroke": "#92d04f"
        },
        "nodes": [
            "12f9f63db1ca2b15",
            "b7f7e99d075f98cb",
            "b7afa47ece10a95c",
            "a0abddb815684d53",
            "97aba36e91b8529e",
            "58f0b84bedafd547",
            "a91f1abd71db9d56",
            "c139bcf93b8eb9d8",
            "86d6832a28267eb8",
            "66e225d8bfe710cd"
        ],
        "x": 1134,
        "y": 479,
        "w": 1212,
        "h": 222
    },
    {
        "id": "66eac534323f2fab",
        "type": "group",
        "z": "832015ea6872af27",
        "name": "Forklift 2",
        "style": {
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "6a56ccba2bb8983a",
            "8a811f2c96ce4f54",
            "ad40ef68f7a86cfc",
            "8dfc9c3adadb975a",
            "ddb2919dd84d4167",
            "2c59ec50710acfdd",
            "04c7d9420acf2b9e"
        ],
        "x": 194,
        "y": 439,
        "w": 892,
        "h": 122
    },
    {
        "id": "317075d5dcd2d722",
        "type": "group",
        "z": "832015ea6872af27",
        "name": "Forklift 3",
        "style": {
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "639f176fc142e47b",
            "cc714f3ceabfbd0c",
            "e12035ebd54203c0",
            "69c0869930a8f52d",
            "75729e746b738d73",
            "a1398be5fc6f8f3a",
            "d769b14fc6e0a35d"
        ],
        "x": 194,
        "y": 579,
        "w": 892,
        "h": 122
    },
    {
        "id": "d619146742dd55e3",
        "type": "group",
        "z": "832015ea6872af27",
        "name": "Forklift 4",
        "style": {
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "4969c65a15c8c366",
            "632421167133f12a",
            "f3858aef7f17168b",
            "59c91d3070d969c9",
            "4b0ab1b62ab38d53",
            "28ea9eb1f8a7b108",
            "16759261f658aa59"
        ],
        "x": 194,
        "y": 719,
        "w": 892,
        "h": 122
    },
    {
        "id": "3469b36081fa6351",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "SIM7080G",
        "func": "let gps = msg.payload[0];\nlet imu = msg.payload[1];\nlet id = 1;\n\n// Unione dei due oggetti in uno solo\nmsg.payload = { id, ...gps, ...imu };\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 360,
        "wires": [
            [
                "6f676160284fba96"
            ]
        ]
    },
    {
        "id": "12f9f63db1ca2b15",
        "type": "mqtt in",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Receive data from forklifts",
        "topic": "forklifts/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d7d5817a8683a565",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "b7f7e99d075f98cb"
            ]
        ]
    },
    {
        "id": "b39d6b0c9b8439b1",
        "type": "join",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "ESP32",
        "mode": "auto",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 360,
        "wires": [
            [
                "3469b36081fa6351"
            ]
        ]
    },
    {
        "id": "b7f7e99d075f98cb",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Read packet",
        "func": "let data = msg.payload;\nlet now = new Date();\nlet timestamp = Math.floor(now.getTime() / 1000);\nlet readableTime = now.toISOString();\n\nmsg.payload = {\n    id: data.id,\n    timestamp: timestamp,\n    readable_time: readableTime,\n    lat: data.lat,\n    lon: data.lon,\n    speed: data.speed,\n    acc_x: data.acc_x,\n    acc_y: data.acc_y,\n    acc_z: data.acc_z,\n    impact: data.impact\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 560,
        "wires": [
            [
                "a0abddb815684d53",
                "97aba36e91b8529e"
            ]
        ]
    },
    {
        "id": "6f676160284fba96",
        "type": "mqtt out",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "Antenna NB-IoT",
        "topic": "forklifts/1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d7d5817a8683a565",
        "x": 980,
        "y": 360,
        "wires": []
    },
    {
        "id": "6a56ccba2bb8983a",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "SIM7080G",
        "func": "let gps = msg.payload[0];\nlet imu = msg.payload[1];\nlet id = 2;\n\n// Unione dei due oggetti in uno solo\nmsg.payload = { id, ...gps, ...imu };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 500,
        "wires": [
            [
                "ad40ef68f7a86cfc"
            ]
        ]
    },
    {
        "id": "8a811f2c96ce4f54",
        "type": "join",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "ESP32",
        "mode": "auto",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 500,
        "wires": [
            [
                "6a56ccba2bb8983a"
            ]
        ]
    },
    {
        "id": "ad40ef68f7a86cfc",
        "type": "mqtt out",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "Antenna NB-IoT",
        "topic": "forklifts/2",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d7d5817a8683a565",
        "x": 980,
        "y": 500,
        "wires": []
    },
    {
        "id": "639f176fc142e47b",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "SIM7080G",
        "func": "let gps = msg.payload[0];\nlet imu = msg.payload[1];\nlet id = 3;\n\n// Unione dei due oggetti in uno solo\nmsg.payload = { id, ...gps, ...imu };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 640,
        "wires": [
            [
                "e12035ebd54203c0"
            ]
        ]
    },
    {
        "id": "cc714f3ceabfbd0c",
        "type": "join",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "ESP32",
        "mode": "auto",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "639f176fc142e47b"
            ]
        ]
    },
    {
        "id": "e12035ebd54203c0",
        "type": "mqtt out",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "Antenna NB-IoT",
        "topic": "forklifts/4",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d7d5817a8683a565",
        "x": 980,
        "y": 640,
        "wires": []
    },
    {
        "id": "4969c65a15c8c366",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "SIM7080G",
        "func": "let gps = msg.payload[0];\nlet imu = msg.payload[1];\nlet id = 4;\n\n// Unione dei due oggetti in uno solo\nmsg.payload = { id, ...gps, ...imu };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 780,
        "wires": [
            [
                "f3858aef7f17168b"
            ]
        ]
    },
    {
        "id": "632421167133f12a",
        "type": "join",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "ESP32",
        "mode": "auto",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 780,
        "wires": [
            [
                "4969c65a15c8c366"
            ]
        ]
    },
    {
        "id": "f3858aef7f17168b",
        "type": "mqtt out",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "Antenna NB-IoT",
        "topic": "forklifts/5",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d7d5817a8683a565",
        "x": 980,
        "y": 780,
        "wires": []
    },
    {
        "id": "b7afa47ece10a95c",
        "type": "file",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Save data",
        "filename": "FinalHomework/node_red/log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1840,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a0abddb815684d53",
        "type": "csv",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Convert to CSV",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "id,timestamp,readable_time,lat,lon,speed,acc_x,acc_y,acc_z,impact",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1680,
        "y": 520,
        "wires": [
            [
                "b7afa47ece10a95c"
            ]
        ]
    },
    {
        "id": "97aba36e91b8529e",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Process & Store Forklift Data",
        "func": "// Estrai i dati dal messaggio in arrivo\nlet id = msg.payload.id;\nlet lat = msg.payload.lat;\nlet lon = msg.payload.lon;\nlet speed = msg.payload.speed;\nlet impact = msg.payload.impact;\n\n// Recupera lo stato corrente dei muletti dal contesto del flusso\nlet forklifts = flow.get(\"forklifts\") || {};\n\n// Se il muletto non esiste ancora nello stato, inizializzalo\nif (!forklifts[id]) {\n    forklifts[id] = {\n        id: id,\n        lat: lat,\n        lon: lon,\n        speed: speed,\n        speedMax: speed,\n        speedSum: speed,\n        speedCount: 1,\n        distance: 0,\n        impacts: impact ? 1 : 0,\n        lastLat: lat,\n        lastLon: lon\n    };\n} else {\n    // Calcola la distanza percorsa\n    let prevLat = forklifts[id].lastLat;\n    let prevLon = forklifts[id].lastLon;\n    let distance = getDistanceFromLatLonInMeters(prevLat, prevLon, lat, lon);\n    forklifts[id].distance += distance;\n    forklifts[id].lastLat = lat;\n    forklifts[id].lastLon = lon;\n\n    // Aggiorna le statistiche di velocità\n    forklifts[id].speed = speed;\n    forklifts[id].speedMax = Math.max(forklifts[id].speedMax, speed);\n    forklifts[id].speedSum += speed;\n    forklifts[id].speedCount += 1;\n\n    // Aggiorna il conteggio degli impatti\n    if (impact) {\n        forklifts[id].impacts += 1;\n    }\n}\n\n// Salva lo stato aggiornato nel contesto del flusso\nflow.set(\"forklifts\", forklifts);\n\n// Prepara il messaggio per la dashboard\nlet dashboardMsg = {\n    payload: Object.values(forklifts)\n};\n\n// Prepara il messaggio per la mappa\nlet mapMsg = {\n    payload: {\n        name: \"Muletto \" + id,\n        lat: lat,\n        lon: lon,\n        icon: \"truck\",\n        layer: \"forklifts\",\n        speed: speed + \" km/h\",\n        tooltip: \"Muletto \" + id + \" - Velocità: \" + speed + \" km/h\"\n    }\n};\n\n// Restituisci entrambi i messaggi\nreturn [dashboardMsg, mapMsg];\n\n// Funzione per calcolare la distanza tra due coordinate geografiche\nfunction getDistanceFromLatLonInMeters(lat1, lon1, lat2, lon2) {\n    function deg2rad(deg) {\n        return deg * (Math.PI / 180);\n    }\n    let R = 6371e3; // Raggio della Terra in metri\n    let dLat = deg2rad(lat2 - lat1);\n    let dLon = deg2rad(lon2 - lon1);\n    let a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let d = R * c;\n    return d;\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 600,
        "wires": [
            [
                "58f0b84bedafd547"
            ],
            [
                "a91f1abd71db9d56"
            ]
        ]
    },
    {
        "id": "58f0b84bedafd547",
        "type": "ui_template",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "group": "a3d194fbb6025806",
        "name": "Forklift Card",
        "order": 1,
        "width": "12",
        "height": "5",
        "format": "<div ng-repeat=\"forklift in msg.payload\" style=\"border:1px solid #ccc; border-radius:10px; padding:10px; margin:5px\">\n  <h3>Muletto {{forklift.id}}</h3>\n  <p>Posizione: {{forklift.lat}}, {{forklift.lon}}</p>\n  <p>Velocità attuale: {{forklift.speed}} km/h</p>\n  <p>Velocità media: {{(forklift.speedSum / forklift.speedCount).toFixed(2)}} km/h</p>\n  <p>Velocità massima: {{forklift.speedMax}} km/h</p>\n  <p>Distanza oggi: {{(forklift.distance / 1000).toFixed(2)}} km</p>\n  <p>Impatti: {{forklift.impacts}}</p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a91f1abd71db9d56",
        "type": "worldmap",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "hiderightclick": "false",
        "coords": "none",
        "path": "",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1950,
        "y": 620,
        "wires": []
    },
    {
        "id": "c139bcf93b8eb9d8",
        "type": "ui_template",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "group": "a3d194fbb6025806",
        "name": "Show worldmap on the dashboard",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<iframe src=\"/worldmap\" width=\"100%\" height=\"500px\" style=\"border:none;\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "Ahow worldmap on the tmplate",
        "x": 2180,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "86d6832a28267eb8",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 660,
        "wires": [
            [
                "66e225d8bfe710cd"
            ]
        ]
    },
    {
        "id": "66e225d8bfe710cd",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "5b670a98d93a0391",
        "name": "Reset forklifts state",
        "func": "flow.set(\"forklifts\", {});\nnode.warn(\"Forklifts states resetted.\");\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "093599c98aa47d3a",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "MPU6050",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "d3383d375b95cf3a"
            ]
        ]
    },
    {
        "id": "edeb5ec4bd231884",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "GPS NEO-6M",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "1e3deb023cb9726a"
            ]
        ]
    },
    {
        "id": "d3383d375b95cf3a",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "Random IMU",
        "func": "// Accelerometro e giroscopio\nlet acc_x = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_y = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_z = (9.7 + Math.random() * 0.4).toFixed(2);\n\nlet gyro_x = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_y = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_z = (Math.random() * 0.4 - 0.2).toFixed(2);\n\nlet impact = Math.random() < 0.05; // 5% di possibilità di impatto\n\nmsg.payload = {\n    acc_x: parseFloat(acc_x),\n    acc_y: parseFloat(acc_y),\n    acc_z: parseFloat(acc_z),\n    gyro_x: parseFloat(gyro_x),\n    gyro_y: parseFloat(gyro_y),\n    gyro_z: parseFloat(gyro_z),\n    impact: impact\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 1,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "b39d6b0c9b8439b1"
            ]
        ]
    },
    {
        "id": "1e3deb023cb9726a",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "64bfe64e9a58d64b",
        "name": "Random GPS",
        "func": "// Area di riferimento: centro Torino (lat 45.0703, lon 7.6869)\nlet baseLat = 45.0703;\nlet baseLon = 7.6869;\n\n// Variazione max di circa 500m (~0.0045 gradi)\nlet lat = baseLat + (Math.random() - 0.5) * 0.009;\nlet lon = baseLon + (Math.random() - 0.5) * 0.009;\n\n// Velocità tra 1.0 e 6.0 km/h\nlet speed = (Math.random() * 5 + 1).toFixed(2);\n\nmsg.payload = {\n    lat: parseFloat(lat.toFixed(6)),\n    lon: parseFloat(lon.toFixed(6)),\n    speed: parseFloat(speed)\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 0,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 340,
        "wires": [
            [
                "b39d6b0c9b8439b1"
            ]
        ]
    },
    {
        "id": "8dfc9c3adadb975a",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "MPU6050",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 330,
        "y": 520,
        "wires": [
            [
                "2c59ec50710acfdd"
            ]
        ]
    },
    {
        "id": "ddb2919dd84d4167",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "GPS NEO-6M",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 320,
        "y": 480,
        "wires": [
            [
                "04c7d9420acf2b9e"
            ]
        ]
    },
    {
        "id": "2c59ec50710acfdd",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "Random IMU",
        "func": "// Accelerometro e giroscopio\nlet acc_x = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_y = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_z = (9.7 + Math.random() * 0.4).toFixed(2);\n\nlet gyro_x = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_y = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_z = (Math.random() * 0.4 - 0.2).toFixed(2);\n\nlet impact = Math.random() < 0.05; // 5% di possibilità di impatto\n\nmsg.payload = {\n    acc_x: parseFloat(acc_x),\n    acc_y: parseFloat(acc_y),\n    acc_z: parseFloat(acc_z),\n    gyro_x: parseFloat(gyro_x),\n    gyro_y: parseFloat(gyro_y),\n    gyro_z: parseFloat(gyro_z),\n    impact: impact\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 1,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "8a811f2c96ce4f54"
            ]
        ]
    },
    {
        "id": "04c7d9420acf2b9e",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "66eac534323f2fab",
        "name": "Random GPS",
        "func": "// Area di riferimento: centro Torino (lat 45.0703, lon 7.6869)\nlet baseLat = 45.0703;\nlet baseLon = 7.6869;\n\n// Variazione max di circa 500m (~0.0045 gradi)\nlet lat = baseLat + (Math.random() - 0.5) * 0.009;\nlet lon = baseLon + (Math.random() - 0.5) * 0.009;\n\n// Velocità tra 1.0 e 6.0 km/h\nlet speed = (Math.random() * 5 + 1).toFixed(2);\n\nmsg.payload = {\n    lat: parseFloat(lat.toFixed(6)),\n    lon: parseFloat(lon.toFixed(6)),\n    speed: parseFloat(speed)\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 0,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "8a811f2c96ce4f54"
            ]
        ]
    },
    {
        "id": "69c0869930a8f52d",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "MPU6050",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 330,
        "y": 660,
        "wires": [
            [
                "a1398be5fc6f8f3a"
            ]
        ]
    },
    {
        "id": "75729e746b738d73",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "GPS NEO-6M",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "d769b14fc6e0a35d"
            ]
        ]
    },
    {
        "id": "a1398be5fc6f8f3a",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "Random IMU",
        "func": "// Accelerometro e giroscopio\nlet acc_x = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_y = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_z = (9.7 + Math.random() * 0.4).toFixed(2);\n\nlet gyro_x = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_y = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_z = (Math.random() * 0.4 - 0.2).toFixed(2);\n\nlet impact = Math.random() < 0.05; // 5% di possibilità di impatto\n\nmsg.payload = {\n    acc_x: parseFloat(acc_x),\n    acc_y: parseFloat(acc_y),\n    acc_z: parseFloat(acc_z),\n    gyro_x: parseFloat(gyro_x),\n    gyro_y: parseFloat(gyro_y),\n    gyro_z: parseFloat(gyro_z),\n    impact: impact\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 1,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "cc714f3ceabfbd0c"
            ]
        ]
    },
    {
        "id": "d769b14fc6e0a35d",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "317075d5dcd2d722",
        "name": "Random GPS",
        "func": "// Area di riferimento: centro Torino (lat 45.0703, lon 7.6869)\nlet baseLat = 45.0703;\nlet baseLon = 7.6869;\n\n// Variazione max di circa 500m (~0.0045 gradi)\nlet lat = baseLat + (Math.random() - 0.5) * 0.009;\nlet lon = baseLon + (Math.random() - 0.5) * 0.009;\n\n// Velocità tra 1.0 e 6.0 km/h\nlet speed = (Math.random() * 5 + 1).toFixed(2);\n\nmsg.payload = {\n    lat: parseFloat(lat.toFixed(6)),\n    lon: parseFloat(lon.toFixed(6)),\n    speed: parseFloat(speed)\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 0,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 620,
        "wires": [
            [
                "cc714f3ceabfbd0c"
            ]
        ]
    },
    {
        "id": "59c91d3070d969c9",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "MPU6050",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 330,
        "y": 800,
        "wires": [
            [
                "28ea9eb1f8a7b108"
            ]
        ]
    },
    {
        "id": "4b0ab1b62ab38d53",
        "type": "inject",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "GPS NEO-6M",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 320,
        "y": 760,
        "wires": [
            [
                "16759261f658aa59"
            ]
        ]
    },
    {
        "id": "28ea9eb1f8a7b108",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "Random IMU",
        "func": "// Accelerometro e giroscopio\nlet acc_x = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_y = (Math.random() * 0.2 - 0.1).toFixed(3);\nlet acc_z = (9.7 + Math.random() * 0.4).toFixed(2);\n\nlet gyro_x = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_y = (Math.random() * 0.4 - 0.2).toFixed(2);\nlet gyro_z = (Math.random() * 0.4 - 0.2).toFixed(2);\n\nlet impact = Math.random() < 0.05; // 5% di possibilità di impatto\n\nmsg.payload = {\n    acc_x: parseFloat(acc_x),\n    acc_y: parseFloat(acc_y),\n    acc_z: parseFloat(acc_z),\n    gyro_x: parseFloat(gyro_x),\n    gyro_y: parseFloat(gyro_y),\n    gyro_z: parseFloat(gyro_z),\n    impact: impact\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 1,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 800,
        "wires": [
            [
                "632421167133f12a"
            ]
        ]
    },
    {
        "id": "16759261f658aa59",
        "type": "function",
        "z": "832015ea6872af27",
        "g": "d619146742dd55e3",
        "name": "Random GPS",
        "func": "// Area di riferimento: centro Torino (lat 45.0703, lon 7.6869)\nlet baseLat = 45.0703;\nlet baseLon = 7.6869;\n\n// Variazione max di circa 500m (~0.0045 gradi)\nlet lat = baseLat + (Math.random() - 0.5) * 0.009;\nlet lon = baseLon + (Math.random() - 0.5) * 0.009;\n\n// Velocità tra 1.0 e 6.0 km/h\nlet speed = (Math.random() * 5 + 1).toFixed(2);\n\nmsg.payload = {\n    lat: parseFloat(lat.toFixed(6)),\n    lon: parseFloat(lon.toFixed(6)),\n    speed: parseFloat(speed)\n};\n\nmsg.parts = {\n    id: \"forkliftSim\",\n    index: 0,\n    count: 2\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 760,
        "wires": [
            [
                "632421167133f12a"
            ]
        ]
    },
    {
        "id": "d7d5817a8683a565",
        "type": "mqtt-broker",
        "name": "Local Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a3d194fbb6025806",
        "type": "ui_group",
        "name": "Forklift Info",
        "tab": "cd54c8a6d1878e99",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cd54c8a6d1878e99",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]